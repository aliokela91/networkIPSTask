package com.networkIPS.task.ui.fragments;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.lifecycle.ViewModelProvider;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.networkIPS.task.R;import com.networkIPS.task.data.ViewModel;import com.networkIPS.task.data.models.items.ArticleItem;import com.networkIPS.task.helpers.Config;import com.networkIPS.task.helpers.GenericItemClickCallback;import com.networkIPS.task.ui.adapter.ArticleAdapter;import com.networkIPS.task.ui.dialogs.MessageActionDialog;import com.networkIPS.task.ui.fragments.base.BaseFragment;import java.util.ArrayList;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.Unbinder;public class ArticlesFragment extends BaseFragment implements GenericItemClickCallback<ArticleItem> {    private static final String TAG = "ArticlesFragment";    private ViewModel viewModel;    private ArticleAdapter articleAdapter;    @BindView(R.id.tv_category_name)    TextView tvCategoryName;    @BindView(R.id.recycler_posts)    RecyclerView recyclerPosts;    @BindView(R.id.iv_category_image)    ImageView ivCategoryImage;    private ArrayList<ArticleItem> articleItems;    private Unbinder unbinder;    public static ArticlesFragment getInstance() {        return new ArticlesFragment();    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.articlee_framgnet, container, false);        unbinder = ButterKnife.bind(this, view);        viewModel = new ViewModelProvider(this).get(ViewModel.class);        activity().setTitle(getString(R.string.home));        initRecycler();        return view;    }    @Override    public void onStart() {        super.onStart();        if (articleItems != null){            articleAdapter.updateData(articleItems);        }else {           getData();        }    }    private void initRecycler() {        recyclerPosts.setHasFixedSize(true);        recyclerPosts.setLayoutManager(new LinearLayoutManager(getContext()));        articleAdapter = new ArticleAdapter(articleItems, getContext(), this);        recyclerPosts.setAdapter(articleAdapter);        getData();    }    private void getData() {        articleItems = new ArrayList<>();        activity().showConnectionLoading(MessageActionDialog.SHOW);        viewModel.getMutableLiveData().observe(this, getArticlesReposeModel -> {            if (getArticlesReposeModel != null) {                activity().showConnectionLoading(MessageActionDialog.HIDE);                if (getArticlesReposeModel.getStatus().equals(Config.API_SUCCESS)) {                    articleItems = (ArrayList<ArticleItem>) getArticlesReposeModel.getArticleItems();                    articleAdapter.updateData(articleItems);                } else {                }            } else {                activity().showConnectionLoading(MessageActionDialog.RETRY, messageActionDialog -> getData());            }        });    }    @Override    public void onDestroyView() {        super.onDestroyView();        if (unbinder != null) unbinder.unbind();    }    @Override    public void onItemClicked(ArticleItem item) {        activity().showFragment(ArticleDetailsFragment.getInstance(item) , true);    }}