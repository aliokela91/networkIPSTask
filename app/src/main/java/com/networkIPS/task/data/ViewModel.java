package com.networkIPS.task.data;import android.annotation.SuppressLint;import android.app.Application;import android.util.Log;import androidx.annotation.NonNull;import androidx.lifecycle.AndroidViewModel;import androidx.lifecycle.MutableLiveData;import com.networkIPS.task.data.models.responses.GetArticlesReposeModel;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;public class ViewModel extends AndroidViewModel {    private static final String TAG = "ViewModel";    private Repository repository;    private MutableLiveData<GetArticlesReposeModel> mutableLiveData = new MutableLiveData<>();    public ViewModel(@NonNull Application application) {        super(application);        repository = new Repository(application);    }    public MutableLiveData<GetArticlesReposeModel> getMutableLiveData() {        repository                .getArticlesReposeModelObservable()                .observeOn(AndroidSchedulers.mainThread())                .subscribeOn(Schedulers.io())                .subscribe(new Observer<GetArticlesReposeModel>() {                    @Override                    public void onSubscribe(Disposable d) {                    }                    @SuppressLint("StaticFieldLeak")                    @Override                    public void onNext(GetArticlesReposeModel getArticlesReposeModel) {                        mutableLiveData.setValue(getArticlesReposeModel);                    }                    @Override                    public void onError(Throwable e) {                        Log.i(TAG, "onError: " + e.getMessage());                        mutableLiveData.setValue(null);                    }                    @Override                    public void onComplete() {                        Log.i(TAG, "onComplete: ");                    }                });        return mutableLiveData;    }}